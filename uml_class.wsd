@startuml all

class Client{
    sock: Socket
    server_address: string
    server_port: int
    original_video: ?
    constracter(): 
    read_video(): void
    connect(): void
    send_video():void
    send_main_menu_info(): void
    send_advanced_settings_info(main_menu): void
    receive_converted_video(): void  
    reset_all_data(): void 
}

class Server{
    sock: Socket
    server_address: string
    server_port: int
    original_video: ?
    constracter():
    accept(): void
    receive_original_video(): video
    receive_main_menu_info(): void
    receive_advanced_settings_info(): void
    convert_video(main_menu,advanced_settings): ?
    send_converted_video(): void
}

class View{

}



@enduml

【要件】
・ユーザーが動画を圧縮し、異なるフォーマットや解像度に変換することができるクライアントサーバ分散アプリケーション
・ユーザーはどのようなプラットフォームやハードウェアからでもこれらの変換サービスを実行することができる
・クライアント側では、ユーザーが自分のコンピュータからファイルを選択し、動画をアップロードしたり、選択したサービスに基づいて新しいバージョンの動画をダウンロードしたりできるようにする
・サーバサイドでは、FFMPEG ライブラリを使用して、これらのサービスを実現できる
・ユーザーにとって使いやすいように、圧縮レベルを high, medium, low のように、あらかじめ選択肢を用意する
・さらに使いやすくするために、クライアントをコマンドラインインターフェースとして提供したり、Python の tkinter のようなライブラリを使って簡単な GUI を提供したりすることもできる
・クライアントとサーバ間で通信を行う場合は、TCP ソケットを使用する
・データストリームを送信するので、独自のプロトコルを作成するか、クライアントとサーバ間でビデオファイルを受け渡しするためのサンプルプロトコルを使用する。
・ビデオデータストリームと一緒に JSON ファイルを送信するか、最初に JSON 設定ファイルを送信して、実際のビデオファイルを送信する前に応答または検証を待つのが良い方法

【ユーザーに提供するサービス】
・動画ファイルを圧縮する： ユーザーは、サーバに動画ファイルをアップロードすると、そのファイルを小さく圧縮したものをダウンロードする。サーバは自動的に最適な圧縮方法を判断する。
・動画の解像度を変更する：ユーザーは動画をアップロードし、使用したい解像度を選択すると、クライアントはこの新しい解像度の動画をダウンロードする。
・動画の縦横比を変更する：ユーザーは動画をアップロードして、使用したい縦横比を選択し、クライアントはこの新しい動画をダウンロードする
・動画をオーディオに変換する：動画ファイルをアップロードすると、その動画の音声のみを収録した MP3 バージョンがダウンロードされる。
・時間範囲を指定してGIF、WEBMに変換する: 動画をアップロードし、時間範囲を指定すると、サーバは動画をトリミングして GIF または WEBM に変換する

【FFMPEGについて】
・FFMPEG は、様々なマルチメディアファイルを簡単に変換・処理することができる多機能なツール
・FFMPEG を使えば、異なるファイルフォーマット間の変換、動画のカットやリサイズ、エフェクトの追加など、様々な操作を行うことができる
・FFMPEG はシェルコマンドで直接実行することができる
・Python から直接これらのコマンドを実行する場合は、シェルコマンドを実行して出力文字列を返す exec 関数を利用する

サービスの流れ
・client.pyを実行
・「動画をアップロードをクリック」
・サービス内容（例： 動画を圧縮する）を選択する
・オプションを決める（例： 圧縮レベルをhigh, medium ,lowの中から選択する）
・処理後の動画をダウンロード

クライアント側
・client.pyを実行
・サーバーとTCPソケットで通信
・動画をサーバーに送る
・選択したサービス内容をサーバーに送る
・選択したオプション内容をサーバーに送る
・サーバーから処理後の動画を受けとる
・処理後の動画を提示する

View
動画の読み込み
・ファイルを選択
・ドラッグアンドドロップ

【動画の編集】
・動画を圧縮 
ex
high
ffmpeg -i test.mp4 -c:v libx264 -crf 40 -preset medium -tune zerolatency -c:a copy output-crf-40.mp4
mid
ffmpeg -i test.mp4 -c:v libx264 -crf 34 -preset medium -tune zerolatency -c:a copy output-crf-34.mp4
low
ffmpeg -i test.mp4 -c:v libx264 -crf 28 -preset medium -tune zerolatency -c:a copy output-crf-28.mp4

・解像度を変更
・縦横比を変更
・オーディオに変換


サーバー側
・server.pyを実行
・クライアントとTPCソケットで通信
・クライアントから動画を受信
・クライアントからサービス内容を受信
・クライアントからオプション内容を受信
・サービス内容、オプション内容をもとに処理を実行
・処理後の動画をクライアントに送る
