@startuml all

class Server{
    sock: Socket
    server_address: string
    server_port: int
    users_original_video: ?
    constracter():
    accept(): void
    receive_menu_info(): void
    receive_original_video(): video
    convert_video(main_menu,advanced_settings): void
    send_converted_video(): void
}

class Client{
    BUFFER_SIZE: int
    sock: Socket
    server_address: string
    server_port: int
    file_path: string
    file_name: string
    file_extension: string
    constracter(): 
    create_menu_info_json(): string
    connect(): void
    send_menu_info(): void
    send_video():void
    receive_converted_video(): void 
    reset_all_data(): void 
}

class ViewController{
    root: TK
    client: Client
    file_name: StringVar
    constracter():
    create_main_manu_page(): void
    prompt_video_file():void
    set_file_path():void
    set_file_name():void
    set_file_extension():void
    display_file_name():void
    create_compress_option_display(): void
    set_main_menu(): void
    set_option_menu(): void
    start_to_convert(): void
}


@enduml

【要件】
・ユーザーが動画を圧縮し、異なるフォーマットや解像度に変換することができるクライアントサーバ分散アプリケーション
・ユーザーはどのようなプラットフォームやハードウェアからでもこれらの変換サービスを実行することができる
・クライアント側では、ユーザーが自分のコンピュータからファイルを選択し、動画をアップロードしたり、選択したサービスに基づいて新しいバージョンの動画をダウンロードしたりできるようにする
・サーバサイドでは、FFMPEG ライブラリを使用して、これらのサービスを実現できる
・ユーザーにとって使いやすいように、圧縮レベルを high, medium, low のように、あらかじめ選択肢を用意する
・さらに使いやすくするために、クライアントをコマンドラインインターフェースとして提供したり、Python の tkinter のようなライブラリを使って簡単な GUI を提供したりすることもできる
・クライアントとサーバ間で通信を行う場合は、TCP ソケットを使用する
・データストリームを送信するので、独自のプロトコルを作成するか、クライアントとサーバ間でビデオファイルを受け渡しするためのサンプルプロトコルを使用する。
・ビデオデータストリームと一緒に JSON ファイルを送信するか、最初に JSON 設定ファイルを送信して、実際のビデオファイルを送信する前に応答または検証を待つのが良い方法

【ユーザーに提供するサービス】
・compress: 動画ファイルを圧縮する： ユーザーは、サーバに動画ファイルをアップロードすると、そのファイルを小さく圧縮したものをダウンロードする。サーバは自動的に最適な圧縮方法を判断する。
・dpi: 動画の解像度を変更する：ユーザーは動画をアップロードし、使用したい解像度を選択すると、クライアントはこの新しい解像度の動画をダウンロードする。
・aspect_ratio: 動画の縦横比を変更する：ユーザーは動画をアップロードして、使用したい縦横比を選択し、クライアントはこの新しい動画をダウンロードする
・audio: 動画をオーディオに変換する：動画ファイルをアップロードすると、その動画の音声のみを収録した MP3 バージョンがダウンロードされる。
・gif_webm 時間範囲を指定してGIF、WEBMに変換する: 動画をアップロードし、時間範囲を指定すると、サーバは動画をトリミングして GIF または WEBM に変換する

【FFMPEGについて】
・FFMPEG は、様々なマルチメディアファイルを簡単に変換・処理することができる多機能なツール
・FFMPEG を使えば、異なるファイルフォーマット間の変換、動画のカットやリサイズ、エフェクトの追加など、様々な操作を行うことができる
・FFMPEG はシェルコマンドで直接実行することができる
・Python から直接これらのコマンドを実行する場合は、シェルコマンドを実行して出力文字列を返す exec 関数を利用する

サービスの流れ
・client.pyを実行
・「選択」をクリック
・サービス内容（例： 動画を圧縮する）を選択する
・オプションを決める（例： 圧縮レベルをhigh, medium ,lowの中から選択する）
・「start」をクリックして動画のアップロードと、処理を開始
・処理後の動画をダウンロード


クライアント側
・client.pyを実行
・動画を選択
・サービスを選択
・サーバーとTCPソケットで通信
・選択したサービス内容をサーバーに送る
・動画をサーバーに送る
・サーバーから処理後の動画をダウンロード
・「ダウンロードが完了しました」

サーバー側
・server.pyを実行
・クライアントとTPCソケットで通信
・クライアントからサービス内容を受信するのを待機
・クライアントから動画を受信
・サービス内容、オプション内容をもとに処理を実行
・処理後の動画をクライアントに送る
・「クライアントからサービス内容を受信」からまたリピート
・クライアントとの接続が切れたら、今までの動画をすべて削除する


View
動画の読み込み
・ファイルを選択
・ドラッグアンドドロップ

【動画の編集】
・動画を圧縮 
ex
high
ffmpeg -i test.mp4 -c:v libx264 -crf 40 -preset medium -tune zerolatency -c:a copy output-crf-40.mp4
mid
ffmpeg -i test.mp4 -c:v libx264 -crf 34 -preset medium -tune zerolatency -c:a copy output-crf-34.mp4
low
ffmpeg -i test.mp4 -c:v libx264 -crf 28 -preset medium -tune zerolatency -c:a copy output-crf-28.mp4

・解像度を変更
ユーザーが入力する情報は「width」と「height」
選択肢 HD, FHD,4k
ユーザーの自由入力

ffmpeg -i {output_file_name} -filter:v scale= {width}:{height} -c:a copy {output_file_name}.mp4
ffmpeg -i test-1920x1080-30fps.mp4 -filter:v scale=1280:720 -c:a copy test-1280x720-30fps.mp4

・縦横比を変更
・width, height

ffmpeg -i my_video.mp4  -c copy -aspect 4:3 new_my_video.mp4
ffmpeg -i {original_file_name}  -c copy -aspect {width}:{height} {output_file_name}

・オーディオに変換
ffmpeg -i train.mp4 -vn output.mp3
ffmpeg -i {original_file_name} -vn {output_file_name}

・gif webm
開始時間
終了時間

ffmpeg -ss 00:00:00 -i test.mp4 -t 00:00:02 -r 5 test.gif
-ss は GIF の開始位置、-to は終了位置、-r はフレームレート、-vf は一定サイズに拡大するフィルタグラフです。

・webm
ffmpeg -ss 00:00:10 -i train.mp4 -t 00:00:12 train.webm

output name rule
・{original_file_name}-{main_menu}-{option_menu}{file_extenstion}
・test-compress-low.mp4


compress = {
    "file_name": "test",
    "file_extension": ".mp4",
    "main_menu": "compress",
    "option_menu":"high"
}

resolution = {
    "file_name": "test",
    "file_extension": ".mp4",
    "main_menu": "resolution",
    "option_menu":{
        "width":"1280",
        "height":"720"
    }
}

width-1280-height-720

aspect = {
    "file_name": "test",
    "file_extension": ".mp4",
    "main_menu": "aspect",
    "option_menu":{
        "width":"1280",
        "height":"720"
    }
}

audio = {
    "file_name": "test",
    "file_extension": ".mp4",
    "main_menu": "audio",
    "option_menu":"-"
}

to git = {
    "file_name": "test",
    "file_extension": ".mp4",
    "main_menu": "git",
    "option_menu":{
        "start":"00:00:00",
        "End":"00:00:00"
    }
}

to webm = {
    "file_name": "test",
    "file_extension": ".mp4",
    "main_menu": "webm",
    "option_menu":{
        "start":"00:00:00",
        "End":"00:00:00"
    }
}